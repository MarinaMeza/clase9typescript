desde node typescript se instala con npm install -g typescript
y con tsc -v veo que version tengo

en la consola con "tsc x.ts" genero el js del mismo archivo. tengo que estar en la misma carpeta

el que incluyo en html es el js

si a la variable que declaro en ts no le asigno un valor (pero si un tipo) en js va a ser undefined porque lo toma como una variable declarada asi no mas en js

"tsc x.ts -w" evita estar haciendo la transpilacion a cada paso que hago
con ctrl c en la consola se termina el watch que se agrega con "-w"

con string se pueden usar "",'' o ``

let variable:any permite guardar cualquier tipo de dato sin tirar error

cuando inicializo una variable en la declaracion esoty anclandole el tipo, si la declaro sin asignarle un tipo puedo guardar distintos tiposde dato sin que me de error

cuando declaro de forma explicita un objeto los tipos en la delcaracion van entre {}


parcial: typescript, cuesitonario y ????

con ctrl c se frena lo que este haciendo la consola
con un ! en un comentario se queda aunque opgna lo de sacar comentarios en el tsconfig.json
para crear el tsconfig.json escribo tsc --init
cuando hago un cambio tengo que ejecutar tsc para que se tomen los cambios que guard√©

se pueden unificar todos los archivos (de js(?)) con outfile asi: tsc --outFile concat.js Practica1 Practica3 x
concat.js es el archivo que se crea con todo, el resto son los ts que se concatenan y no hace falta que tenga la extension

cuando nombro un objeto y pongo .g salen los getter, .s los setter y .m los metodos
dentro de un namespace lo que quiero que se permita usar por fuera del namespace tienen que tener un export y para llamarlo por fuera del namespace pongo NombreDelNameSpace.nombreDeFuncion();
